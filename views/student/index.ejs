<%- include('../components/navbar.ejs') %>

<!-- Home Section -->
<div class="section container text-center mt-3">
    <h1>Take Attendance</h1>
    <img src="https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExMnphOXhoNzM2eTJ0em4xZ2tyMDJ1d2xyYWtzZW0wbGw5c3pxNWM2MyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/ZqtXbgxEWHV8oF8L9J/giphy.gif"
        alt="QR Code" class="my-md-3 hero-img">
    <button id="scan-me" class="btn btn-primary d-block mx-auto" data-bs-toggle="modal" data-bs-target="#scanModal">Scan
        Me</button>
</div>

<!-- Modal -->
<div class="modal fade" id="scanModal" tabindex="-1" aria-labelledby="scanModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="scanModalLabel">QR Code Scanner</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="reader" width="600px"></div>
                <p class="mt-3">Scanned Result: <span id="scanned-result"></span></p>
                <input type="text" name="userId" id="userId" hidden value="<%= user.id %>" >
            </div>
            <div class="modal-footer">
                <button id="rescan-btn" class="btn btn-secondary">Re-Scan</button>
                <button id="stop-scan-btn" class="btn btn-danger" data-bs-dismiss="modal">Stop Scan</button>
            </div>
        </div>
    </div>
</div>

<!-- Include a QR code scanning library, like html5-qrcode -->
<script src="https://unpkg.com/html5-qrcode" type="text/javascript"></script>
<script>
    const scannedResult = document.getElementById("scanned-result");
    const stopScanBtn = document.getElementById("stop-scan-btn");
    const rescanBtn = document.getElementById("rescan-btn");
    const scanModal = document.getElementById("scanModal");
    const userId = document.getElementById('userId').value;

    let html5QrCode = new Html5Qrcode("reader");
    let cameraId;

    // Function to handle the QR code scanning result
    function onScanSuccess(decodedText, decodedResult) {
        scannedResult.innerText = decodedText;
        scannedResult.className = "text-success";

        // Stop the scanner after a successful scan
        try {
            html5QrCode.stop().then(() => {
                html5QrCode.clear();
                html5QrCode = {};
                rescanBtn.disabled = false;

                sendQrCodeData(decodedResult);
            })
        } catch (error) {
            if (error == "Cannot stop, scanner is not running or paused.") {
                // empty block of code to jump the unneccessary error found in the htmml5Qrcode library
            }
            console.error("Error stopping the scan:", err);
        }


    }

    function onScanFailure(error) {
        // Wait for 10 seconds before stopping the scan
        setTimeout(() => {
            if (html5QrCode) {
                try {
                    html5QrCode.stop().then(() => {
                        html5QrCode.clear();
                        html5QrCode = {};
                        rescanBtn.disabled = false;

                        scannedResult.innerText = "Failed to scan code. Try again!";
                        scannedResult.className = "text-danger"
                    })
                } catch (error) {
                    if (error == "Cannot stop, scanner is not running or paused.") {
                        // empty block of code to jump the unneccessary error found in the htmml5Qrcode library
                    }
                }
            };
        }, 10000); // 10 seconds in milliseconds
    }

    scanModal.addEventListener("shown.bs.modal", async () => {
        const config = {
            fps: 10,
            qrbox: {
                width: 250,
                height: 250
            }
        };

        html5QrCode.start({
            facingMode: "environment"
        }, config, onScanSuccess, onScanFailure);
    })

    // Function to send QR code data to the server
    function sendQrCodeData(decodedText) {
        const dataToSend = {
            username: userId, // Replace with the actual username from your application context
            qrCodeData: JSON.parse(decodedText) // Assuming QR code contains JSON data
        };

        fetch('/submit-attendance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(dataToSend)
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    console.error('Error:', data.error);
                    alert(`Error: ${data.error}`);
                } else {
                    console.log('Success:', data.message);
                    alert(`Attendance marked as ${data.message}`);
                }
            })
            .catch(error => {
                console.error('Error submitting data to server:', error);
                alert('An error occurred while submitting the attendance.');
            });
    }

    stopScanBtn.addEventListener('click', () => {
        if (html5QrCode) {
            try {
                html5QrCode.stop().then(() => {
                    html5QrCode.clear();
                    rescanBtn.disabled = false;
                })
            } catch (error) {
                if (error == "Cannot stop, scanner is not running or paused.") {
                    // empty block of code to jump the unneccessary error found in the htmml5Qrcode library
                }
                console.error("Error stopping the scan:", err);
            }
        }
    });

    rescanBtn.addEventListener('click', () => {
        if (html5QrCode) {
            scannedResult.innerText = "";
            scannedResult.className = "text-black";
            rescanBtn.disabled = false;
            startQrCodeScanner(cameraId);
        }
    });
</script>